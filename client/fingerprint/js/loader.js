// Generated by CoffeeScript 1.10.0
(function() {

  var Loader, createCopyButton, mobileAndTabletCheck, root;

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  root.createCopyButton = createCopyButton = function(text, home) {
    var clipboard;
    clipboard = new Clipboard('.btn');
    clipboard.on('success', function(e) {
      var trigger;
      e.clearSelection();
      trigger = $(e.trigger);
      if (trigger.attr('data-toggle') === 'tooltip') {
        trigger.attr('data-original-title', "Coppied").tooltip('fixTitle').tooltip('show');
        return setTimeout(function() {
          return trigger.tooltip('hide');
        }, 1000);
      }
    });
    clipboard.on('error', function(e) {
      var trigger;
      trigger = $(e.trigger);
      if (trigger.attr('data-toggle') === 'tooltip') {
        trigger.attr('data-original-title', "Press Cmd+C to copy").tooltip('fixTitle').tooltip('show');
        return setTimeout(function() {
          return trigger.tooltip('hide');
        }, 3000);
      }
    });
    return $("<button type='button' class='btn btn-default' data-clipboard-action='copy' data-clipboard-text='" + text + "' data-toggle='tooltip' data-trigger='manual' data-placement='auto' data-html='true' >Copy</button>").tooltip().appendTo($(home));
  };

  root.mobileAndTabletCheck = mobileAndTabletCheck = function() {
    return (function(a) {
      if (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(a) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0, 4))) {
        return true;
      } else {
        return false;
      }
    })(navigator.userAgent || navigator.vendor || window.opera);
  };

  Loader = (function() {
    function Loader() {
      var simpleName, susanName;
      this.parseURL();
      this.numberOfAssets = 0;
      this.numLoaded = 0;
      simpleName = './assets/simple.json';
      this.loadJSONResource(simpleName, (function(_this) {
        return function(err, simpleModel) {
          _this.simpleModel = simpleModel;
          if (err) {
            alert('error getting simpleModel');
            console.log(err);
          } else {
            _this.assetLoaded();
          }
          return true;
        };
      })(this));

    }

    Loader.prototype.parseURL = function() {
      var c, j, len, ref, seq;
      this.url = document.URL;
      this.parser = document.createElement('a');
      this.parser.href = this.url;
      this.commands = this.parser.search;
      this.requests = {};
      if (this.commands) {
        ref = this.commands.slice(1).split('&');
        for (j = 0, len = ref.length; j < len; j++) {
          c = ref[j];
          seq = c.split('=');
          this.requests[seq[0]] = seq[1];
        }
      }
      return root.requests = this.requests;
    };

    Loader.prototype.assetLoaded = function() {
      this.numLoaded++;
      if (this.numLoaded === this.numberOfAssets) {
        return this.beginTests();
      }
    };

    Loader.prototype.loadTextResource = function(url, callback) {
      var request;
      ++this.numberOfAssets;
      request = new XMLHttpRequest();
      request.open('GET', url + "?please-dont-cache=" + (Math.random()), true);
      request.onload = function() {
        if (request.status < 200 || request.status > 299) {
          return callback("Error: HTTP Status " + request.status + " on resource " + url);
        } else {
          return callback(null, request.responseText);
        }
      };
      request.send();
      return true;
    };

    Loader.prototype.loadJSONResource = function(url, callback) {
      this.loadTextResource(url, function(err, result) {
        var e, error;
        if (err) {
          return callback(err);
        } else {
          try {
            return callback(null, JSON.parse(result));
          } catch (error) {
            e = error;
            return callback(e);
          }
        }
      });
      return true;
    };

    Loader.prototype.beginTests = function() {
      var postProgress,sender;
    
      root.sender = sender = new Sender();
      this.asyncTests = [];
      sender.finalized = true;
      this.numberOfTests = this.asyncTests.length+1;
      this.numComplete = 0;
      postProgress = (function(_this) {
        return function() {
          return sender.sendData();
        };
      })(this);
      postProgress();

      return true;
    };

    return Loader;

  })();

  $(function() {
    var loader;
    return loader = new Loader();
  });


  // LanguageDetector
  var LanguageDetector, root, safeParseJSON;

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  safeParseJSON = function(s) {
    try {
      return JSON.parse(s);
    } catch (error) {
      return false;
    }
  };

  LanguageDetector = (function() {
    function LanguageDetector() {
      this.names = safeParseJSON('[ "Latin", "Chinese", "Arabic", "Devanagari", "Cyrillic", "Bengali/Assamese", "Kana", "Gurmukhi", "Javanese", "Hangul", "Telugu", "Tamil", "Malayalam", "Burmese", "Thai", "Sundanese", "Kannada", "Gujarati", "Lao", "Odia", "Ge-ez", "Sinhala", "Armenian", "Khmer", "Greek", "Lontara", "Hebrew", "Tibetan", "Georgian", "Modern Yi", "Mongolian", "Tifinagh", "Syriac", "Thaana", "Inuktitut", "Cherokee" ]');
      this.codes = safeParseJSON("[[76,97,116,105,110], [27721,23383], [1575,1604,1593,1585,1576,1610,1577], [2342,2375,2357,2344,2366,2327,2352,2368], [1050,1080,1088,1080,1083,1080,1094,1072], [2476,2494,2434,2482,2494,32,47,32,2437,2488,2478,2496,2479,2492,2494], [20206,21517], [2583,2625,2608,2606,2625,2582,2624], [43415,43438], [54620,44544], [3108,3142,3122,3137,3095,3137], [2980,2990,3007,2996,3021], [3374,3378,3375,3390,3379,3330], [4121,4156,4116,4154,4121,4140], [3652,3607,3618], [7070,7077,7060,7082,7059], [3221,3240,3277,3240,3233], [2711,2753,2716,2736,2750,2724,2752], [3749,3762,3751], [2825,2852,2893,2837,2867], [4877,4821,4829], [3523,3538,3458,3524,3517], [1344,1377,1397,1400,1409], [6017,6098,6040,6082,6042], [917,955,955,951,957,953,954,972], [6674,6682,6664,6673], [1488,1500,1508,1489,1497,1514], [3926,3964,3921,3851], [4325,4304,4320,4311,4323,4314,4312], [41352,41760], [6190,6179,6185,6189,6179,6191], [11612,11593,11580,11593,11599,11568,11606], [1808,1834,1825,1821,1808], [1931,1960,1928,1964,1920,1960], [5123,5316,5251,5198,5200,5222], [5091,5043,5033], [55295, 7077]]");
      this.fontSize = 9;
      this.fontFace = "Verdana";
      this.extraHeigth = 15;
      this.results = [];
    }

    LanguageDetector.prototype.begin = function() {
      var c, code, h, height, i, j, k, l, len, len1, len2, len3, len4, len5, len6, len7, m, n, o, p, ref, ref1, ref2, ref3, round, s, w, width;
      round = 0;
      this.widths = [];
      this.heights = [];
      this.support = [];
      this.test_div = document.createElement("div");
      document.body.appendChild(this.test_div);
      this.test_div.id = "WritingTest";
      ref = this.codes;
      for (i = 0, len = ref.length; i < len; i++) {
        code = ref[i];
        this.height = [];
        this.width = [];
        this.div = document.createElement("div");
        this.test_div.appendChild(this.div);
        round += 1;
        this.div.id = round;
        this.div.style.display = "inline-block";
        for (j = 0, len1 = code.length; j < len1; j++) {
          c = code[j];
          this.div.innerHTML = ("<font face = '" + this.fontFace + "' size = ") + this.fontSize + ">&#" + c + "</font>";
          this.height.push(document.getElementById(round).clientHeight);
          this.width.push(document.getElementById(round).clientWidth);
        }
        this.div.innerHTML = "";
        for (k = 0, len2 = code.length; k < len2; k++) {
          c = code[k];
          this.div.innerHTML += ("<font face = '" + this.fontFace + "' size = ") + this.fontSize + ">&#" + c + "</font>";
        }
        this.test_div.innerHTML += this.height + ";" + this.width + "<br>";
        this.heights.push(this.height);
        this.widths.push(this.width);
      }
      this.tw = this.widths.pop();
      this.sw1 = this.tw[0];
      this.sw2 = this.tw[1];
      this.sh = this.heights.pop()[0];
      ref1 = this.heights;
      for (l = 0, len3 = ref1.length; l < len3; l++) {
        height = ref1[l];
        this.passed = 0;
        for (m = 0, len4 = height.length; m < len4; m++) {
          h = height[m];
          if (h !== this.sh) {
            this.support.push(true);
            this.passed = 1;
            break;
          }
        }
        if (this.passed === 0) {
          this.support.push(false);
        }
      }
      this.writing_scripts_index = 0;
      ref2 = this.widths;
      for (n = 0, len5 = ref2.length; n < len5; n++) {
        width = ref2[n];
        for (o = 0, len6 = width.length; o < len6; o++) {
          w = width[o];
          if (this.support[this.writing_scripts_index] === false) {
            if (w !== this.sw1 && w !== this.sw2) {
              this.support[this.writing_scripts_index] = true;
            }
          }
        }
        this.writing_scripts_index += 1;
      }
      this.res = [];
      this.writing_scripts_index = 0;
      ref3 = this.support;
      for (p = 0, len7 = ref3.length; p < len7; p++) {
        s = ref3[p];
        this.test_div.innerHTML += this.names[this.writing_scripts_index] + ": " + s + " <br>";
        if (s === true) {
          this.res.push(this.names[this.writing_scripts_index]);
        }
        this.writing_scripts_index += 1;
      }
      this.test_div.remove();
      return this.res;
    };

    return LanguageDetector;

  })();

  root.get_writing_scripts = function() {
    var detector;
    detector = new LanguageDetector;
    return this.res = detector.begin();
  };

}).call(this);

// fontDetector
var fontDetector = function() {
  // a font will be compared against all the three default fonts.
  // and if it doesn't match all 3 then that font is not available.
  var baseFonts = ['monospace', 'sans-serif', 'serif'];

  //we use m or w because these two characters take up the maximum width.
  // And we use a LLi so that the same matching fonts can get separated
  var testString = "mmmmmmmmmmlli";

  //we test using 72px font size, we may use any size. I guess larger the better.
  var testSize = '72px';

  var h = document.getElementsByTagName("body")[0];

  // create a SPAN in the document to get the width of the text we use to test
  var s = document.createElement("span");
  s.style.fontSize = testSize;
  s.innerHTML = testString;
  var defaultWidth = {};
  var defaultHeight = {};
  for (var index in baseFonts) {
      //get the default width for the three base fonts
      s.style.fontFamily = baseFonts[index];
      h.appendChild(s);
      defaultWidth[baseFonts[index]] = s.offsetWidth; //width for the default font
      defaultHeight[baseFonts[index]] = s.offsetHeight; //height for the defualt font
      h.removeChild(s);
  }

  function detect(font) {
      var detected = false;
      for (var index in baseFonts) {
          s.style.fontFamily = font + ',' + baseFonts[index]; // name of the font along with the base font for fallback.
          h.appendChild(s);
          var matched = (s.offsetWidth != defaultWidth[baseFonts[index]] || s.offsetHeight != defaultHeight[baseFonts[index]]);
          h.removeChild(s);
          detected = detected || matched;
      }
      return detected;
  }

  this.detect = detect;
};

